library()
sessionInfo()
library(phangorn)
alignment = read.phyDat("alignment.fas", format="fasta", type="DNA")
alignment
dist_matrix = dist.dna(as.DNAbin(alignment))
dist_matrix
UPGMA_tree = upgma(dist_matrix)
plot(UPGMA_tree)
UPGMA_tree
NJ_tree = nj(dist_matrix)
plot(NJ_tree)
NJ_tree
layout(matrix(c(1,2)), height=c(1,1.25))
par(mar=c(.1,.1,.1,.1))
UPGMA_tree_root <- root(UPGMA_tree, "Lemur_catta", r=TRUE)
plot(UPGMA_tree_root)
NJ_tree_root <- root(NJ_tree, "Lemur_catta", r=TRUE)
plot(NJ_tree_root)
boot_trees <- boot.phylo(NJ_tree, alignment, FUN = function(xx) nj(dist.dna(xx, model = "JC69")), B = 10000)
packageVersion('phangorn')
install.packages("phangorn")
install.packages("phangorn")
alignment = read.phyDat("alignment.fas", format="fasta", type="DNA")
alignment
dist_matrix = dist.dna(as.DNAbin(alignment))
dist_matrix
UPGMA_tree = upgma(dist_matrix)
plot(UPGMA_tree)
UPGMA_tree
NJ_tree = nj(dist_matrix)
plot(NJ_tree)
NJ_tree
layout(matrix(c(1,2)), height=c(1,1.25))
par(mar=c(.1,.1,.1,.1))
UPGMA_tree_root <- root(UPGMA_tree, "Lemur_catta", r=TRUE)
plot(UPGMA_tree_root)
NJ_tree_root <- root(NJ_tree, "Lemur_catta", r=TRUE)
plot(NJ_tree_root)
boot_trees <- boot.phylo(NJ_tree, alignment, FUN = function(xx) nj(dist.dna(xx, model = "JC69")), B = 10000)
alignment = read.phyDat("alignment.fas", format="fasta", type="DNA")
alignment
dist_matrix = dist.dna(as.DNAbin(alignment))
dist_matrix
UPGMA_tree = upgma(dist_matrix)
plot(UPGMA_tree)
UPGMA_tree
NJ_tree = nj(dist_matrix)
plot(NJ_tree)
NJ_tree
layout(matrix(c(1,2)), height=c(1,1.25))
par(mar=c(.1,.1,.1,.1))
UPGMA_tree_root <- root(UPGMA_tree, "Lemur_catta", r=TRUE)
plot(UPGMA_tree_root)
NJ_tree_root <- root(NJ_tree, "Lemur_catta", r=TRUE)
plot(NJ_tree_root)
alignment = read.phyDat("alignment.fas", format="fasta", type="DNA")
alignment
dist_matrix = dist.dna(as.DNAbin(alignment))
dist_matrix
UPGMA_tree = upgma(dist_matrix)
plot(UPGMA_tree)
packageVersion('phangorn')
alignment = read.phyDat("alignment.fas", format="fasta", type="DNA")
alignment
dist_matrix = dist.dna(as.DNAbin(alignment))
dist_matrix
UPGMA_tree = upgma(dist_matrix)
install.packages('phangorn')
alignment = read.phyDat("alignment.fas", format="fasta", type="DNA")
alignment
dist_matrix = dist.dna(as.DNAbin(alignment))
dist_matrix
UPGMA_tree = upgma(dist_matrix)
plot(UPGMA_tree)
alignment = read.phyDat("alignment.fas", format="fasta", type="DNA")
alignment
library(ape)
library(phangorn)
library(seqinr)
library(phytools)
alignment = read.phyDat("alignment.fas", format="fasta", type="DNA")
alignment
dist_matrix = dist.dna(as.DNAbin(alignment))
dist_matrix
UPGMA_tree = upgma(dist_matrix)
plot(UPGMA_tree)
UPGMA_tree
NJ_tree = nj(dist_matrix)
plot(NJ_tree)
NJ_tree
layout(matrix(c(1,2)), height=c(1,1.25))
par(mar=c(.1,.1,.1,.1))
UPGMA_tree_root <- root(UPGMA_tree, "Lemur_catta", r=TRUE)
plot(UPGMA_tree_root)
NJ_tree_root <- root(NJ_tree, "Lemur_catta", r=TRUE)
plot(NJ_tree_root)
boot_trees <- boot.phylo(NJ_tree, alignment, FUN = function(xx) nj(dist.dna(xx, model = "JC69")), B = 10000)
boot_trees <- boot.phylo(NJ_tree, as.DNAbin(alignment), FUN = function(xx) nj(dist.dna(xx, model = "JC69")), B = 10000)
plotTree(ladderize(UPGMA_tree))
plotTree(ladderize(NJ_tree))
plotTree(ladderize(UPGMA_tree_root))
plotTree(ladderize(NJ_tree_root))
writeNexus(UPGMA_tree_root, file="primates_dna_upgma_tree.nex")
writeNexus(NJ_tree_root, file="primates_dna_nj_tree.nex")
library(rmarkdown)
When you click the **Knit** button a document will be generated that includes both content as well as the output of any embedded R code chunks within the document. You can embed an R code chunk like this:
```{r cars}
load("~/modelos/.RData")
source("~/modelos/MD.Rmd", echo=TRUE)
source("~/modelos/MD.Rmd", echo=TRUE)
setwd("~/modelos/ode")
library(deSolve)
parmeters <- c(b=0.5, d=0.49)
state <- c(N=10)
Cr_Expo <- function(t, state, parameters) {
with(as.list(c(state, parameters)) {
dN <- (b - d) * N
list(C(dN))
})
}
times <- seq(0, 200, by=0.01)
out <- ode(y = state, times=times, func=Cr_Expo, params=parameters)
plot(out, xlab='tiempo', ylab='n(t)')
library(deSolve)
parmeters <- c(b=0.5, d=0.49)
state <- c(N=10)
Cr_Expo <- function(t, state, parameters) {
with(as.list(c(state, parameters)), {
dN <- (b - d) * N
list(C(dN))
})
}
times <- seq(0, 200, by=0.01)
out <- ode(y = state, times=times, func=Cr_Expo, params=parameters)
plot(out, xlab='tiempo', ylab='n(t)')
library(deSolve)
parmeters <- c(b=0.5, d=0.49)
state <- c(N=10)
Cr_Expo <- function(t, state, parameters) {
with(as.list(c(state, parameters)), {
dN <- (b - d) * N
list(C(dN))
})
}
times <- seq(0, 200, by=0.01)
out <- ode(y = state, times=times, func=Cr_Expo, params=parameters)
out <- ode(y = state, times=times, func=Cr_Expo, params=params)
params <- c(b=0.5, d=0.49)
out <- ode(y = state, times=times, func=Cr_Expo, params=params)
Cr_Expo <- function(t, state, params) {
with(as.list(c(state, parameters)), {
dN <- (b - d) * N
list(C(dN))
})
}
out <- ode(y = state, times=times, func=Cr_Expo, params=params)
library(deSolve)
params <- c(b=0.5, d=0.49)
state <- c(N=10)
Cr_Expo <- function(t, state, params) {
with(as.list(c(state, params)), {
dN <- (b - d) * N
list(C(dN))
})
}
times <- seq(0, 200, by=0.01)
out <- ode(y = state, times=times, func=Cr_Expo, params=params)
plot(out, xlab='tiempo', ylab='n(t)')
library(deSolve)
params <- c(b=0.5, d=0.49)
state <- c(N=10)
Cr_Expo <- function(t, state, params) {
with(as.list(c(state, params)), {
dN <- (b - d) * N
list(C(dN))
})
}
times <- seq(0, 200, by=0.01)
out <- ode(y = state, times=times, func=Cr_Expo, parms=params)
plot(out, xlab='tiempo', ylab='n(t)')
library(deSolve)
params <- c(b=0.5, d=0.49)
state <- c(N=10)
Cr_Expo <- function(t, state, params) {
with(as.list(c(state, params)), {
dN <- (b - d) * N
list(c(dN))
})
}
times <- seq(0, 200, by=0.01)
out <- ode(y = state, times=times, func=Cr_Expo, parms=params)
plot(out, xlab='tiempo', ylab='n(t)')
library(deSolve)
params <- c(b=0.5, d=0.49)
state <- c(N=1)
Cr_Expo <- function(t, state, params) {
with(as.list(c(state, params)), {
dN <- (b - d) * N
list(c(dN))
})
}
times <- seq(0, 200, by=0.01)
out <- ode(y = state, times=times, func=Cr_Expo, parms=params)
plot(out, xlab='tiempo', ylab='n(t)')
library(deSolve)
params <- c(b=0.5, d=0.49)
state <- c(N=10)
Cr_Expo <- function(t, state, params) {
with(as.list(c(state, params)), {
dN <- (b - d) * N
list(c(dN))
})
}
times <- seq(0, 200, by=0.01)
out <- ode(y = state, times=times, func=Cr_Expo, parms=params)
plot(out, xlab='tiempo', ylab='n(t)')
library(deSolve)
params <- c(b=0.5, d=0.51)
state <- c(N=10)
Cr_Expo <- function(t, state, params) {
with(as.list(c(state, params)), {
dN <- (b - d) * N
list(c(dN))
})
}
times <- seq(0, 200, by=0.01)
out <- ode(y = state, times=times, func=Cr_Expo, parms=params)
plot(out, xlab='tiempo', ylab='n(t)')
library(deSolve)
params <- c(b=0.5, d=0.5)
state <- c(N=10)
Cr_Expo <- function(t, state, params) {
with(as.list(c(state, params)), {
dN <- (b - d) * N
list(c(dN))
})
}
times <- seq(0, 200, by=0.01)
out <- ode(y = state, times=times, func=Cr_Expo, parms=params)
plot(out, xlab='tiempo', ylab='n(t)')
library(deSolve)
params <- c(b=0.5, d=0.3)
state <- c(N=10)
Cr_Expo <- function(t, state, params) {
with(as.list(c(state, params)), {
dN <- (b - d) * N
list(c(dN))
})
}
times <- seq(0, 200, by=0.01)
out <- ode(y = state, times=times, func=Cr_Expo, parms=params)
plot(out, xlab='tiempo', ylab='n(t)')
library(deSolve)
params <- c(b=0.5, d=0.4)
state <- c(N=10)
Cr_Expo <- function(t, state, params) {
with(as.list(c(state, params)), {
dN <- (b - d) * N
list(c(dN))
})
}
times <- seq(0, 200, by=0.01)
out <- ode(y = state, times=times, func=Cr_Expo, parms=params)
plot(out, xlab='tiempo', ylab='n(t)')
library(deSolve)
params <- c(b=0.5, d=0.48)
state <- c(N=10)
Cr_Expo <- function(t, state, params) {
with(as.list(c(state, params)), {
dN <- (b - d) * N
list(c(dN))
})
}
times <- seq(0, 200, by=0.01)
out <- ode(y = state, times=times, func=Cr_Expo, parms=params)
plot(out, xlab='tiempo', ylab='n(t)')
library(deSolve)
params <- c(b=0.5, d=0.42)
state <- c(N=10)
Cr_Expo <- function(t, state, params) {
with(as.list(c(state, params)), {
dN <- (b - d) * N
list(c(dN))
})
}
times <- seq(0, 200, by=0.01)
out <- ode(y = state, times=times, func=Cr_Expo, parms=params)
plot(out, xlab='tiempo', ylab='n(t)')
library(deSolve)
params <- c(b=0.5, d=0.42, K=1000)
state <- c(N=10)
Cr_Expo <- function(t, state, params) {
with(as.list(c(state, params)), {
dN <- (b - d) * N (1 - N/K)
list(c(dN))
})
}
times <- seq(0, 200, by=0.01)
out <- ode(y = state, times=times, func=Cr_Expo, parms=params)
plot(out, xlab='tiempo', ylab='n(t)')
library(deSolve)
params <- c(b=0.5, d=0.42, K=1000)
state <- c(N=10)
Cr_Expo <- function(t, state, params) {
with(as.list(c(state, params)), {
dN <- (b - d) * N * (1 - N/K)
list(c(dN))
})
}
times <- seq(0, 200, by=0.01)
out <- ode(y = state, times=times, func=Cr_Expo, parms=params)
plot(out, xlab='tiempo', ylab='n(t)')
library(deSolve)
params <- c(b=0.5, d=0.42, K=1000)
state <- c(N=10)
Cr_Logist <- function(t, state, params) {
with(as.list(c(state, params)), {
dN <- (b - d) * N * (1 - N/K)
list(c(dN))
})
}
times <- seq(0, 200, by=0.01)
out <- ode(y = state, times=times, func=Cr_Logist, parms=params)
plot(out, xlab='tiempo', ylab='n(t)')
library(deSolve)
params <- c(b=0.5, d=0.49, K=1000)
state <- c(N=10)
Cr_Logist <- function(t, state, params) {
with(as.list(c(state, params)), {
dN <- (b - d) * N * (1 - N/K)
list(c(dN))
})
}
times <- seq(0, 1000, by=0.01)
out <- ode(y = state, times=times, func=Cr_Logist, parms=params)
plot(out, xlab='tiempo', ylab='n(t)')
library(deSolve)
params <- c(b=0.5, d=0.49, K=1000)
state <- c(N=0)
Cr_Logist <- function(t, state, params) {
with(as.list(c(state, params)), {
dN <- (b - d) * N * (1 - N/K)
list(c(dN))
})
}
times <- seq(0, 1000, by=0.01)
out <- ode(y = state, times=times, func=Cr_Logist, parms=params)
plot(out, xlab='tiempo', ylab='n(t)')
library(deSolve)
params <- c(b=0.5, d=0.49, K=1000)
state <- c(N=1000)
Cr_Logist <- function(t, state, params) {
with(as.list(c(state, params)), {
dN <- (b - d) * N * (1 - N/K)
list(c(dN))
})
}
times <- seq(0, 1000, by=0.01)
out <- ode(y = state, times=times, func=Cr_Logist, parms=params)
plot(out, xlab='tiempo', ylab='n(t)')
library(deSolve)
params <- c(b=0.5, d=0.49, K=1000)
state <- c(N=990) # N = K, punto de equilibrio
# los puntos de equilibrio pueden ser estables e inestables
Cr_Logist <- function(t, state, params) {
with(as.list(c(state, params)), {
dN <- (b - d) * N * (1 - N/K)
list(c(dN))
})
}
times <- seq(0, 1000, by=0.01)
out <- ode(y = state, times=times, func=Cr_Logist, parms=params)
plot(out, xlab='tiempo', ylab='n(t)')
library(deSolve)
params <- c(b=0.5, d=0.49, K=1050)
state <- c(N=990) # N = K, punto de equilibrio
# los puntos de equilibrio pueden ser estables e inestables
Cr_Logist <- function(t, state, params) {
with(as.list(c(state, params)), {
dN <- (b - d) * N * (1 - N/K)
list(c(dN))
})
}
times <- seq(0, 1000, by=0.01)
out <- ode(y = state, times=times, func=Cr_Logist, parms=params)
plot(out, xlab='tiempo', ylab='n(t)')
library(deSolve)
params <- c(b=0.5, d=0.49, K=1000)
state <- c(N=1050) # N = K, punto de equilibrio
# los puntos de equilibrio pueden ser estables e inestables
Cr_Logist <- function(t, state, params) {
with(as.list(c(state, params)), {
dN <- (b - d) * N * (1 - N/K)
list(c(dN))
})
}
times <- seq(0, 1000, by=0.01)
out <- ode(y = state, times=times, func=Cr_Logist, parms=params)
plot(out, xlab='tiempo', ylab='n(t)')
library(deSolve)
params <- c(b=0.5, d=0.49, K=1000, a=2) # asintÃ³ticamente, la poblaciÃ³n tiende a K
state <- c(N=1050) # N = K, punto de equilibrio
# los puntos de equilibrio pueden ser estables e inestables
Cr_Logist <- function(t, state, params) {
with(as.list(c(state, params)), {
dN <- (b - d) * N * (1 - N/K) * ((N - a) / K)
list(c(dN))
})
}
times <- seq(0, 1000, by=0.01)
out <- ode(y = state, times=times, func=Cr_Logist, parms=params)
plot(out, xlab='tiempo', ylab='n(t)')
library(deSolve)
params <- c(b=0.5, d=0.49, K=1000, a=2)
state <- c(N=1050)
Cr_Logist <- function(t, state, params) {
with(as.list(c(state, params)), {
dN <- (b - d) * N * (1 - N/K) * ((N - a) / K)
list(c(dN))
})
}
times <- seq(0, 1000, by=0.01)
out <- ode(y = state, times=times, func=Cr_Logist, parms=params)
plot(out, xlab='tiempo', ylab='n(t)')
library(deSolve)
params <- c(b=0.5, d=0.49, K=1000, a=500)
state <- c(N=1050)
Cr_Allee <- function(t, state, params) {
with(as.list(c(state, params)), {
dN <- (b - d) * N * (1 - N/K) * ((N - a) / K)
list(c(dN))
})
}
times <- seq(0, 1000, by=0.01)
out <- ode(y = state, times=times, func=Cr_Allee, parms=params)
plot(out, xlab='tiempo', ylab='n(t)')
library(deSolve)
params <- c(b=0.5, d=0.49, K=1000, a=500)
state <- c(N=2)
Cr_Allee <- function(t, state, params) {
with(as.list(c(state, params)), {
dN <- (b - d) * N * (1 - N/K) * ((N - a) / K)
list(c(dN))
})
}
times <- seq(0, 1000, by=0.01)
out <- ode(y = state, times=times, func=Cr_Allee, parms=params)
plot(out, xlab='tiempo', ylab='n(t)')
library(deSolve)
params <- c(b=0.5, d=0.49, K=1000, a=500)
state <- c(N=500)
Cr_Allee <- function(t, state, params) {
with(as.list(c(state, params)), {
dN <- (b - d) * N * (1 - N/K) * ((N - a) / K)
list(c(dN))
})
}
times <- seq(0, 1000, by=0.01)
out <- ode(y = state, times=times, func=Cr_Allee, parms=params)
plot(out, xlab='tiempo', ylab='n(t)')
library(deSolve)
params <- c(b=0.5, d=0.49, K=1000, a=500)
state <- c(N=550)
Cr_Allee <- function(t, state, params) {
with(as.list(c(state, params)), {
dN <- (b - d) * N * (1 - N/K) * ((N - a) / K)
list(c(dN))
})
}
times <- seq(0, 1000, by=0.01)
out <- ode(y = state, times=times, func=Cr_Allee, parms=params)
plot(out, xlab='tiempo', ylab='n(t)')
library(deSolve)
params <- c(a=0.4, b=0.5, c=0.005, d=0.49)
state <- c(X=30, Y=30)
Cr_Allee <- function(t, state, params) {
with(as.list(c(state, params)), {
dX = a * X - b * X * Y
dY = -c * Y - d * X * Y
list(c(dX, dY))
})
}
times <- seq(0, 1000, by=0.01)
out <- ode(y = state, times=times, func=Cr_Allee, parms=params)
plot(out, xlab='tiempo', ylab='n(t)')
library(deSolve)
params <- c(a=0.4, b=0.5, c=0.05, d=0.49)
state <- c(X=30, Y=30)
Cr_Allee <- function(t, state, params) {
with(as.list(c(state, params)), {
dX = a * X - b * X * Y
dY = -c * Y - d * X * Y
list(c(dX, dY))
})
}
times <- seq(0, 1000, by=0.01)
out <- ode(y = state, times=times, func=Cr_Allee, parms=params)
plot(out, xlab='tiempo', ylab='n(t)')
library(deSolve)
params <- c(a=0.4, b=0.5, c=0.05, d=0.49)
state <- c(X=30, Y=30)
Cr_Allee <- function(t, state, params) {
with(as.list(c(state, params)), {
dX = a * X - b * X * Y
dY = -c * Y + d * X * Y
list(c(dX, dY))
})
}
times <- seq(0, 1000, by=0.01)
out <- ode(y = state, times=times, func=Cr_Allee, parms=params)
plot(out, xlab='tiempo', ylab='n(t)')
